0410
● 컴파일 : JVM을 통해서 사용자 언어를 컴퓨터언어로 바꾸는 것
	
●자바 코드를 바이트 코드(클래스 파일)로 변환하는 것
	Test.java ---컴파일---> Test.class

● tool 
	그림판 -> 포토샵
	메모장 -> 워드,한글파일
	메모장 -> 이클립스
   

0411
● 들여쓰기, 카멜 표기법 중요! (파스칼 스네이크 헝가리안)

● 단축키
	주석 ctrl + / (여러줄 주석은 드래그)
	실행 ctrl + f11

● 메소드(기능, 동작)
	- 클래스

● 변수 : 메모리에 값을 저장하기 위한 공간 (할당 초기화 대입)

● 참조 자료형 : 주소값 저장 (String은 클래스)
	○모든 클래스는 참조자료형이 될 수 있다! 14:26

● 기능 클래스 / 실행 클래스

0414
●메소드 구성
	접근제한자  + [예약어] + 반환타입 메소드명([매개변수]) {}
		      생략가능		       생략가능
	○예약어 : static 등

	○반환타입 : 모든 자료형이 올 수 있음
		반환을 안하고 싶으면 void, return 없음
		반환을 하고 싶으면 자료형, return 있음
		(*void -> 리턴값 없음)

	○매개변수 : 외부로 부터 데이터를 받아오는 곳

●자동 형변환
	int num = 'P';
		System.out.println("num = " + num); //80
		char ch1 = 65;
		System.out.println("ch1 = " + ch1); //A

●정의
	nextLine() - 문자 + 줄바꿈 모두 인식
	nextInt() - 숫자만 인식

	○문제점
	nextInt() 다음 nextLine()이 올 경우에는 /n이 버퍼에 남아있는 
	상태이고, 다음에 오는 nextLine()이 이것을 입력이 끝난 상태로 
	인식해서 입력하지 않고 바로 넘어가게된다. 

	○해결방법
	1. nextLine()으로 버퍼에 남아있는 줄바꿈 제거
	2. 파싱하기 (문자열을 기본 자료형으로 바꾸는 것)
		int age = Integer.parseInt(strAge);

0416
●문자열 비교
	○문제점
		문자열에서 == 은 주소값을 비교하는 것
	○해결
		equals() 메소드 사용
		ex) name.equals(password)

0417
●조건문 실행 구조
	○ 초기식 -> 조건식 -> 수행할 문장 -> 증감식 -> 조건문 -> False면 탈출

●Math.random()	
	0~1사이 실수 랜덤

17:10 널포인터

0421
●자바에서 초기화 안해도 되는이유
	객체를 힙메모리에 생성할 때 jvm이 알아서 자료형의 기본값으로 만들어줌

●필드에 밑줄 있으면 -> static


4/23 시험
시험범위 객체까지
시험시간 1교시 50분
코드가 있고 어디서 잘못된건지 찾고 왜 잘못됐는지 쓰고 코드 수정

fastcampus
클론코딩

0422
● 매개변수 생성자 작성시 JVM이 기본 생성자를 자동으로 생성해주지 않음
● 오버로딩
	한 클래스 내에 동일한 이름의 메소드를 여러개 작성하는 기법
	같은 메소드 이름, 다른 매개변수 개수 또는 타입
● 오버라이딩
	자식 클래스의 메소드의 이름,매개변수 개수,타입이 같을 경우
	부모클래스의 메소드를 갱신해준다.

●전역변수 vs 지역변수
	지역변수에 우선권
● this
	실행하고 있는 내 객체를 가리킨다. 11:15
● this()
	같은 클래스의 다른 생성자를 호출할 때 사용
	반드시 첫 줄에 선언

● 가변인자
	대표적인 예(printf)

● 객체 배열
	arr[0] = new Example();
	arr[1] = new Example();
	스택 메모리에 arr생성, 힙 메모리에 Example객체 생성
	arr에 주소값 저장(참조형 변수)

● arr.personInfo() -> 배열에 메소드를 불러오라시킴 (구문오류)
    arr[0].personInfo() -> 구문오류는 아니지만 널포인터익셉션

● toString
	대표값을 나타낸다 (주소값!)
	toString을 오버라이딩을 해서 내가 원하는 대표값으로 변경한다.

● alt shift s + r
	게터 세터 단축키


0428
● 다형성 개념
	Figure f = new Figure();
	Circle c = new Circle();
	Triangle t = new Triangle();

	//다형성 적용
	Figure f1 = new Circle();
	Figure f2 = new Triangle();

● 부모 타입 레퍼런스로 자식 객체를 다루는 경우"
	Parent p2 = new Child2();
	p2.printParent();
	// p2.printChild2(); -> 불가능

11~12시 내용 복습 졸았음

● 추상 클래스
	자체적으로 객체 생성 불가 -> 반드시 상속하여 객체 생성
	abstract 메소드가 포함된 클래스는 반드시 abstract 클래스
	
12:30

● API
● String

	
0429

●0501
	studentList.add(new Student("강건강", 50));
	studentList.remove(new Student("강건강", 50));
	-> 지워지지 않음 why?
	
	○정적바인딩 (o.equals)
		오버라이딩이 되어 있지 않아서 equals비교할 때 주소값을 비교
	
	○동적바인딩
		후손에 우선권 부여


● **개념정리**
● 객체	
	new 연산자를 통해 메모리 영역에 생성된 것
● 클래스
	객체의 특성에 대한 정의한 것
	공통 요소를 추상화하여 정의
● 추상화
	필요한 공통점 추출
● 클래스 -> 인스턴스화 -> 객체
● 생성자 
	객체가 new 연산자를 통해 Heap메모리 영역에 할당될 때
	객체 안에서 만들어지는 필드 초기화
● 오버로딩 (메소드)
	동일한 이름의 메소드 여러 개 작성
● return 
	해당 메소드를 종료하고 자신을 호출한 메소드로 돌아가는 예약어
	stack 자료구조(LIFO)

● 객체배열
	Example arr[] = new Example[2];
	○Stack
		arr에 주소값 저장(참조형 변수)
	○Heap
		arr[0] -> Example 객체 저장
		arr[1] -> Example 객체 저장

● 상속

● 오버라이딩
	자식 클래스에서 부모클래스의 메소드 재정의

● 다형성
	상속을 이용해 부모 타입으로 부터 파생된 자식 객체를 
	부모 클래스 타입하나로 다룰 수 있는 기술

● 업 캐스팅 -> 다형성을 위해
	자식 클래스의 객체를 부모 클래스 타입으로 형 변환
	자동 형변환, 부모 클래스에 정의된 멤버만 접근 가능

● 다운 캐스팅 -> 자식 메서드를 사용할 때
	부모 클래스 타입의 객체를 자식 클래스 타입으로 형변환
	명시적 형변환, 잘못된 캐스팅시 ClassCastException 발생
 	
	Animal a = new Dog();      // 업캐스팅
	 a.sound();            // 가능
        	// a.bark();          // 컴파일 오류 (Animal 타입이므로 bark()는 모름)
        	Dog d = (Dog) a;           // 다운캐스팅
      	d.bark();                     // 정상 작동

● instanceof 연산자
	현재 참조형 변수가 어떤 클래스형의 객체 주소를 
	참조하고 있는지 확인할 때 사용하는 연산자

● 정적 바인딩
	static, final, private 메서드, 필드

● 동적 바인딩
	컴파일 시점에 어떤 메서드나 변수에 접근할지 결정됨.
	오버라이딩된 인스턴스 메서드

	Animal a = new Dog();
     	 a.staticMethod();   // 정적 바인딩 → Animal's static method
	 a.sound(); 	// 동적 바인딩 → Dog barks
● abstract class
	몸체 없는 메소드를 포함한 클래스

● abstract method
	몸체 없는 메소드
	상속시 반드시 구현해야 하는, 오버라이딩이 강제화되는 메소드

● 인터페이스
	상수형 필드와 추상 메소드만을 작성할 수 있는 추상 클래스의 변형체
	메소드 통일성을 부여하기 위해 추상 메소드만 따로 모아놓은 것으로
	상속 시 인터페이스 내에 정의된 모든 추상 메소드 구현해야함

● 컬렉션
	자바에서 제공하는 자료구조를 담당하는 프레임워크
	1. 동적 크기 조절
	2. 추가 삭제 정렬 기능처리가 간단
	3. 여러 타입의 데이터 저장가능
		객체만 저장할 수 있기 때문에 기본자료형은 Wrapper클래스 사용

● Set
	○ 동일 객체 : 주소값이 같은 객체
	○ 동등 객체 : 주소값이 다르지만 내용이 같은 객체

-------------------------------------------------------------------------------------------
0507 데이터베이스
●데이터베이스 계정
	○관리자 -> 자동 생성 -> 비밀번호는 설정해야함
	○사용자
	
● -- 한줄 주석
/*
여러줄 주석
*/

●
	○ 관리자 계정 : 데이터베이스의 생성과 관리를 담당하고 있는 슈퍼 유저 계정
              	   오브젝트 생성, 변경, 삭제 등의 작업이 가능하며
                	 데이터베이스에 대한 모든 권한과 책임을 가지는 계정
 	○사용자 계정 : 데이터베이스에 대하여 질의, 갱신 등의 작업을 수행할 수 있는 계정
                  	일반 계정은 보안을 위해 업무에 필요한 최소한의 권한만 가지는 것을 
	      	원칙으로 함
0509
● 데이터베이스
	○ select문 : select, from, [where], [group by], [having], [order by]
	○ result set : 결과 집합

●컬럼 별칭
 	○ 컬럼명 AS 별칭 / 컬럼명 "별칭" / 컬럼명 AS "별칭" / 컬럼명 별칭
 	○ ""은 별칭에 특수문자가 포함되거나 숫자로 시작할 경우 사용

●실행 순서
	○WHERE에 SELECT에서 선언한 별칭을 사용할 수 없는 이유
 		5 SELECT
 		1 FROM
		2 WHERE
 		3 GROUP BY
 		4 HAVING 
 		6 ORDER BY

● AND, OR 우선순위
	AND가 OR보다 우선순위가 높음

● 평가 리뷰

0512
● DUAL
	가상테이블 / 더미테이블

0515
● DML 다음 트랜잭션 처리하기
● DML 구문 다음 DDL을 작성하면 자동 커밋됨

----------------------------------------------------------------------------------

0519 JDBC
● Class.forName() : 드라이버를 등록
● DriverManager : getConnection메소드로 커넥션 객체 생성

● Statement / preparedStatement 
	connection객체의 메소드를 통해 쿼리를 전달하기위한 객체 생성
● 차이점
	Statement : 완성형 쿼리
	PreparedStatement : 미완성형 쿼리

● Connection 객체의 메소드를 통해서 statement, preparedstatement객체 생성

● executeQuery, executeUpdate : 객체를 전달하는 메소드
● 차이점
	executeQuery : select문 -> 반환타입 : resultSet
	executeUpdate : DML문  -> 반환타입 : int (행의 개수)

● MVC 패턴
	View : 화면 출력
	Controller : View-Model 이어줌, 데이터 가공, model에서 반환값에 따라 view결정
	Model : 데이터 관련
		- vo : 데이터를 담는 임시공간 = 변수
		- dao : 데이터와 직접 연결되는 곳


● java.lang.ClassNotFoundException: oracle.jdbc.driver.OracleDriver 오류
	1. 프로젝트에 라이브러리를 집어넣지 않았을 때
	2. 오타

● 자바 필드 변수명은 오라클 컬럼명과 상관없음
	인자값이 오라클의 컬럼명과는 같아야된다!!

0521
● us 검색 
	preparedstatement를 통해서 위치홀더에 데이터를 삽입한다고 했을 때 자동으로 작은따옴표가 삽입상태로 들어감
		ex) select * from member where member_id like '%'us'%';
		-> 문법 오류

시험 
JDBCTemplate 중복제거, 
자원 반납 close, 
변수명 컬럼명, 
DAO는 쿼리 보내고 결과값 받는 업무 -> 나머지는 service에서 처리



0528
<style> -> CSS -> <head>
<script> -> JavaScript -> 어디든 상관없지만 html내부에 -> 읽히는 시점은 다를 수 있다.

● 자바스크립트 함수
	기본형 : function internal(){}
		자바스크립트에서 함수는 반환타입이 없다.


● 자바스크립트 변수
	var 1개!

● innerHTML vs innerText
	innerHTML : html 태그 변경 가능, 해석가능
	innerText : html 태그 변경 가능, 해석 불가

● getElementsByTagName
	여러개 있던 한개만 있던 컬렉션으로 반환

●class에 area가 들어간 요소에 테두리를 짧은 선으로 변경
                for (var i = 0; i < area.length; i++) {
                    area[i].style.borderStyle = 'dashed';
                }
	area.style -> x
	area[i].style -> 컬렉션이기 때문

0530
● 자바스크립트 2_basicgrammar
● let vs const
	let : 일반적인 변수 선언(덮어쓰기 가능, 기존 var와 같음, hoisting 차단, block scope)
        const : 상수 변수 선언(덮어쓰기 불가능, final이 붙은 변수와 비슷, hoisting 차단)
	var : hoisting 지원, function scope(같은 함수내 사용 가능)

● 화살표 함수 / 익명함수
	const testPlus = () => {
	}

● ===연산자 / !==연산자
	값과 자료형 둘다 일치하는지, 일치하지 않는지 확인할 때 사용

● alert(`${month}월은 ${day}일까지입니다.`);
	printf같은 느낌, 백킷 써야함
















TimeTable
6시 학원 끝
0640 집도착
0700 - 0740 식사
0800 - 0900 러닝
0900 - 0930 샤워
1000 - 0100 개발공부
0200 취침
0730 기상
